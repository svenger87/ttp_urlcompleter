name: "Build"

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build_release:
    name: Build & Release (macOS)
    runs-on: macos-latest
    steps:
      # 1. Checkout repository
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up Java (for Android)
      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Set up Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      # 4. Install dependencies
      - name: Flutter Pub Get
        run: flutter pub get

      # 5. Prepare Android signing
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      # 6. Build Android APK
      - name: Build APK
        run: flutter build apk --release

      # 7. Build Android AAB
      - name: Build App Bundle
        run: flutter build appbundle --release

      # 8. Build iOS (IPA)
      - name: Build IPA
        run: flutter build ipa --release

      # 9. Compress iOS build artifacts (optional)
      - name: Compress iOS Build
        run: |
          cd build
          tar -czf ios_build.tar.gz ios

      # 10. Upload artifacts to GitHub (for reference, as a Release asset)
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/ios_build.tar.gz
            build/ios/ipa/Runner.ipa

      # 11. Extract version from pubspec.yaml
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      # 12. Check if tag exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # 13. If the tag exists, modify it
      - name: Modify Tag if it Exists
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # 14. Create GitHub Release
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/flutter-apk/app-release.apk,
            build/app/outputs/bundle/release/app-release.aab,
            build/ios_build.tar.gz,
            build/ios/ipa/Runner.ipa
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}

      # 15. Upload IPA to App Store Connect via Fastlane
      - name: Install Ruby (for Fastlane)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install Fastlane
        run: gem install fastlane

      - name: Create Fastlane API Key
        run: echo "${{ secrets.APP_STORE_CONNECT_API_KEY_JSON }}" > fastlane_api_key.json

      - name: Upload to App Store Connect (TestFlight or App Store)
        run: |
          fastlane pilot upload \
            --ipa "build/ios/ipa/Runner.ipa" \
            --api_key_path fastlane_api_key.json
        env:
          LC_ALL: en_US.UTF-8

  windows_build:
    name: Build Windows App (with Installer)
    runs-on: windows-latest
    steps:
      # 1. Checkout
      - name: Checkout
        uses: actions/checkout@v3

      # 2. Set up Flutter on Windows
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      # 3. Install dependencies
      - name: Flutter Pub Get
        run: flutter pub get

      # 4. Build Windows release
      - name: Build Windows
        run: flutter build windows --release

      # 5. Install Inno Setup
      - name: Install Inno Setup
        run: choco install innosetup --yes

      # 6. Build Windows Installer with Inno Setup
      #    Assuming your .iss is stored at windows/windows_installer.iss
      - name: Create Windows Installer
        run: iscc windows\\windows_installer.iss

      # 7. Upload Windows Installer Artifact
      #    The .exe installer will be generated under the OutputDir specified in .iss (e.g., windows/installer/ttp_App.exe)
      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: WindowsInstaller
          path: windows\\installer\\ttp_App.exe
